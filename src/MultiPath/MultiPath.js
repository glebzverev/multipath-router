import{ useState, form } from 'react';
// import styled from "styled-components";

import './MultiPath.css';
// import {SwapMultiPath} from './Checker';

import {multiSwap, setDestinationNet} from "./multiSwap";
import { Box, Button, Flex, Spacer, Input, Text } from "@chakra-ui/react";




function MultiPath({}){
    const [sourceToken, setSourceToken] = useState('0x8475318Ee39567128ab81D6b857e7621b9dC3442'); 
    const [destinationToken, setDestinationToken] = useState('0x7bcE539216d7E2cB1270DAA564537E0C1bA3F356'); 
    const [amountIn, setAmountIn] = useState(1);
    const [amountOutMin, setAmountOutMin] = useState(0.5);

    const [receiver, setReceiver] = useState('0x3604226674A32B125444189D21A51377ab0173d1');
    // const chainID = {"0x62": 97, "0x13881": 80001};
    
    async function Submit(){ 
        multiSwap(amountIn, amountOutMin, sourceToken, destinationToken, receiver); 
    }

    // async function SwapMultiPath(amountIn, amountOutMin, sourceToken, destinationToken, receiver){
        // let chain = await setDestinationNet();
        // var before=[]
        // for (var i in inputListBefore){
        //     before.push(inputListBefore[i]['address']);
        // }     
        // var after=[]
        // for (var i in inputListAfter){
        //     after.push(inputListAfter[i]['address']);
        // } 
        // if (window.ethereum) {
        //     const provider = new ethers.providers.Web3Provider(window.ethereum);
        //     const signer = provider.getSigner();
        //     const contract = new ethers.Contract(
        //       AugustusSwapperAddress[chain],
        //       IParaSwap,
        //       signer
        //     );
        //     try {
        //         console.log(chain, AugustusSwapperAddress[chain]);
        //         console.log("try Swap");
        //         const options = {value: ethers.utils.parseEther((0.01).toString())};
        //         const fee = ethers.utils.parseEther((0.05).toString()); 
        //         const amount = ethers.utils.parseEther((amountIn).toString()); 
        //         const minOut = ethers.utils.parseEther((amountOutMin).toString()); 
        //         let response = await contract.swapOnMultiPathDeBridge([amount, minOut, before, after, receiver, fee, chain], options);
        //         console.log("response: ", response);
        //     } catch (err) {
        //       console.log("error: ",err);
        //     }
        // }
    // }

    // async function setDestinationNet(){
    //     if (window.ethereum) {
    //         let currentChainId = await window.ethereum.request({
    //           method: 'eth_chainId',
    //         });
    //         if (chainID[currentChainId] == 80001){
    //             return 97;
    //         } else {
    //             return 80001;
    //         }
    //     }
    // }

    return (
    <div>
        <div>
            <Text>
                MultiPath Crosschain Swap
            </Text>
        </div>
        <Text>Base Info</Text>

        <div>
            <Input
                placeholder="Source Token Address"
                variant="outlined"
                value={sourceToken}
                onChange={(e) => setSourceToken(e.target.value)}
                text='Amount of token you want to swap'
                type="string"
            />
        </div>
        <div>
        <Input
                placeholder="Destination Token Address"
                variant="outlined"
                value={destinationToken}
                onChange={(e) => setDestinationToken(e.target.value)}
                text='Amount of token you want to swap'
                type="string"
            />
        </div>
        <div>
        <Input
                placeholder="Amount In"
                variant="outlined"
                value={amountIn}
                onChange={(e) => setAmountIn(e.target.value)}
                text='Minimum amount of token you want to get back'
                type="number"
                step="0.5"
            />
        </div>
        <div>
        <Input
                placeholder="Amount Out Min"
                variant="outlined"
                value={amountOutMin}
                onChange={(e) => setAmountOutMin(e.target.value)}
                text='Minimum amount of token you want to get back'
                type="number"
                step="0.5"
            />
        </div><div>


        </div><div>

        <Input
            placeholder="Receiver"
            variant="outlined"
            value={receiver}
            onChange={(e) => setReceiver(e.target.value)}
            text='Token receiver'
            type='string'
          />    
        </div><div>
        <Text>Source and Destination Adapters Info generated by backend router</Text>
        </div>
        <Button className = 'MultiPathCustomChkraButton'
        onClick={Submit}>
            Swap
        </Button>
    </div>
    );
}

export default MultiPath;
